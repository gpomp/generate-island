#pragma glslify: snoise2 = require(glsl-noise/simplex/2d)
#define PHONG
#define USE_COLOR
varying vec2 vUv;
uniform float time;
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
// chunk(common);
// chunk(packing);
// chunk(color_pars_fragment);
// chunk(uv_pars_fragment);
// chunk(uv2_pars_fragment);
// chunk(map_pars_fragment);
// chunk(alphamap_pars_fragment);
// chunk(aomap_pars_fragment);
// chunk(lightmap_pars_fragment);
// chunk(emissivemap_pars_fragment);
// chunk(envmap_pars_fragment);
// chunk(gradientmap_pars_fragment);
// chunk(fog_pars_fragment);
// chunk(bsdfs);
// chunk(lights_pars);
// chunk(lights_phong_pars_fragment);
// chunk(shadowmap_pars_fragment);
// chunk(bumpmap_pars_fragment);
// chunk(normalmap_pars_fragment);
// chunk(specularmap_pars_fragment);
// chunk(logdepthbuf_pars_fragment);
// chunk(clipping_planes_pars_fragment);
void main() {
  // chunk(clipping_planes_fragment);
  vec4 diffuseColor = vec4( diffuse, opacity );
  // diffuseColor.rgb += snoise2(vUv * 10000.0) * 0.15;
  ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
  vec3 totalEmissiveRadiance = emissive;
  // chunk(logdepthbuf_fragment);
  // chunk(map_fragment);
  // chunk(color_fragment);
  // chunk(alphamap_fragment);
  // chunk(alphatest_fragment);
  // chunk(specularmap_fragment);
  // chunk(normal_flip);
  // chunk(normal_fragment);
  // chunk(emissivemap_fragment);
  // chunk(lights_phong_fragment);
  // chunk(lights_template);
  // chunk(aomap_fragment);
  vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
  // chunk(envmap_fragment);
  gl_FragColor = vec4( outgoingLight, diffuseColor.a );
  // gl_FragColor.rgb = floor(gl_FragColor.rgb * 100.0) / 100.0;
  // chunk(premultiplied_alpha_fragment);
  // chunk(tonemapping_fragment);
  // chunk(encodings_fragment);
  // chunk(fog_fragment);
  // gl_FragColor.rgb = vColor;
}
